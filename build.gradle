plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'name.remal.sonarlint' version '1.5.0'
    id 'org.sonarqube' version '3.3'
}

ext {
    serviceName = 'prologue'
    serviceVersion = '4.1.0'

    accentVersion = '4.1.2'
    lombokVersion = '1.18.24'
    springVersion = '5.3.24'
    springBootVersion = '2.7.6'
    springDataCommonsVersion = '2.6.10'
    springSecurityAuthServerVersion = '0.4.0'
    commonsIoVersion = '2.11.0'
    ehcacheVersion = '3.10.8'
    springdocVersion = '1.6.13'
    restQueryEngineVersion = '0.7.1'
    rsqlJpaVersion = '2.0.2'
    rsqlParserVersion = '2.1.0'
}

sonarqube {
    def bootProject = project(":${serviceName}")
    properties {
        property 'sonar.coverage.jacoco.xmlReportPaths', "${bootProject.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

allprojects {
    group 'io.naraway'
    version serviceVersion

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'maven' // on gradle 6.x for publish maven central
    apply plugin: 'signing'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'name.remal.sonarlint'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }

    sonarlint {
        ignoreFailures false
        excludes {
            source '**/test/java/**/*'

            message 'java:S1135' // Track uses of TODO tags
            message 'java:S1301' // switch' statements should have at least 3 case clauses
            message 'java:S1192' // String literals should not be duplicated
            message 'java:S3740' // Raw types should not be used
            message 'java:S1700' // A field should not duplicate the name of its containing class
            message 'java:S106' // Standard outputs should not be used directly to log anything
            message 'java:S115' // Constant names should comply with a naming convention
        }
    }

    test {
        useJUnitPlatform()
    }

//    apply from: '../publish.gradle'
}

task printServiceName() {
    doLast {
        println "serviceName: ${serviceName}"
    }
}
